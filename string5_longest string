#include <iostream>
#include <unordered_map>

using namespace std;

// Function to find the length of the longest substring without repeating characters
int lengthOfLongestSubstring(string s) {
    unordered_map<char, int> charIndexMap;
    int maxLength = 0;
    int start = 0;

    for (int end = 0; end < s.length(); ++end) {
        if (charIndexMap.find(s[end]) != charIndexMap.end()) {
            // If the character is repeated, update the start index
            start = max(start, charIndexMap[s[end]] + 1);
        }

        // Update the character index in the map
        charIndexMap[s[end]] = end;

        // Update the maximum length
        maxLength = max(maxLength, end - start + 1);
    }

    return maxLength;
}

int main() {
    // Input a string
    cout << "Enter a string: ";
    string inputString;
    cin >> inputString;

    // Call the function to find the length of the longest substring without repeating characters
    int result = lengthOfLongestSubstring(inputString);

    // Display the result
    cout << "Length of the longest substring without repeating characters: " << result << endl;

    return 0;
}
